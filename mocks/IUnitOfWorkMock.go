// Code generated by mockery v2.53.3. DO NOT EDIT.

package ports

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IUnitOfWorkMock is an autogenerated mock type for the IUnitOfWork type
type IUnitOfWorkMock struct {
	mock.Mock
}

type IUnitOfWorkMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IUnitOfWorkMock) EXPECT() *IUnitOfWorkMock_Expecter {
	return &IUnitOfWorkMock_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *IUnitOfWorkMock) Begin(ctx context.Context) context.Context {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// IUnitOfWorkMock_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type IUnitOfWorkMock_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IUnitOfWorkMock_Expecter) Begin(ctx interface{}) *IUnitOfWorkMock_Begin_Call {
	return &IUnitOfWorkMock_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *IUnitOfWorkMock_Begin_Call) Run(run func(ctx context.Context)) *IUnitOfWorkMock_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IUnitOfWorkMock_Begin_Call) Return(_a0 context.Context) *IUnitOfWorkMock_Begin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUnitOfWorkMock_Begin_Call) RunAndReturn(run func(context.Context) context.Context) *IUnitOfWorkMock_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *IUnitOfWorkMock) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUnitOfWorkMock_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type IUnitOfWorkMock_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IUnitOfWorkMock_Expecter) Commit(ctx interface{}) *IUnitOfWorkMock_Commit_Call {
	return &IUnitOfWorkMock_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *IUnitOfWorkMock_Commit_Call) Run(run func(ctx context.Context)) *IUnitOfWorkMock_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IUnitOfWorkMock_Commit_Call) Return(_a0 error) *IUnitOfWorkMock_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUnitOfWorkMock_Commit_Call) RunAndReturn(run func(context.Context) error) *IUnitOfWorkMock_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *IUnitOfWorkMock) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUnitOfWorkMock_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type IUnitOfWorkMock_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IUnitOfWorkMock_Expecter) Rollback(ctx interface{}) *IUnitOfWorkMock_Rollback_Call {
	return &IUnitOfWorkMock_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *IUnitOfWorkMock_Rollback_Call) Run(run func(ctx context.Context)) *IUnitOfWorkMock_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IUnitOfWorkMock_Rollback_Call) Return(_a0 error) *IUnitOfWorkMock_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUnitOfWorkMock_Rollback_Call) RunAndReturn(run func(context.Context) error) *IUnitOfWorkMock_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUnitOfWorkMock creates a new instance of IUnitOfWorkMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUnitOfWorkMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUnitOfWorkMock {
	mock := &IUnitOfWorkMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
