// Code generated by mockery v2.53.3. DO NOT EDIT.

package ports

import (
	context "context"
	order "lisichkinuriy/delivery/internal/domain/order"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IOrderRepositoryMock is an autogenerated mock type for the IOrderRepository type
type IOrderRepositoryMock struct {
	mock.Mock
}

type IOrderRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderRepositoryMock) EXPECT() *IOrderRepositoryMock_Expecter {
	return &IOrderRepositoryMock_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, aggregate
func (_m *IOrderRepositoryMock) Add(ctx context.Context, aggregate *order.Order) error {
	ret := _m.Called(ctx, aggregate)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = rf(ctx, aggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOrderRepositoryMock_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type IOrderRepositoryMock_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - aggregate *order.Order
func (_e *IOrderRepositoryMock_Expecter) Add(ctx interface{}, aggregate interface{}) *IOrderRepositoryMock_Add_Call {
	return &IOrderRepositoryMock_Add_Call{Call: _e.mock.On("Add", ctx, aggregate)}
}

func (_c *IOrderRepositoryMock_Add_Call) Run(run func(ctx context.Context, aggregate *order.Order)) *IOrderRepositoryMock_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.Order))
	})
	return _c
}

func (_c *IOrderRepositoryMock_Add_Call) Return(_a0 error) *IOrderRepositoryMock_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOrderRepositoryMock_Add_Call) RunAndReturn(run func(context.Context, *order.Order) error) *IOrderRepositoryMock_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *IOrderRepositoryMock) Get(ctx context.Context, id uuid.UUID) (*order.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*order.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *order.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderRepositoryMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IOrderRepositoryMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *IOrderRepositoryMock_Expecter) Get(ctx interface{}, id interface{}) *IOrderRepositoryMock_Get_Call {
	return &IOrderRepositoryMock_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *IOrderRepositoryMock_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *IOrderRepositoryMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *IOrderRepositoryMock_Get_Call) Return(_a0 *order.Order, _a1 error) *IOrderRepositoryMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderRepositoryMock_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*order.Order, error)) *IOrderRepositoryMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAssignedOrders provides a mock function with given fields: ctx
func (_m *IOrderRepositoryMock) GetAssignedOrders(ctx context.Context) ([]*order.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAssignedOrders")
	}

	var r0 []*order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*order.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*order.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderRepositoryMock_GetAssignedOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAssignedOrders'
type IOrderRepositoryMock_GetAssignedOrders_Call struct {
	*mock.Call
}

// GetAssignedOrders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IOrderRepositoryMock_Expecter) GetAssignedOrders(ctx interface{}) *IOrderRepositoryMock_GetAssignedOrders_Call {
	return &IOrderRepositoryMock_GetAssignedOrders_Call{Call: _e.mock.On("GetAssignedOrders", ctx)}
}

func (_c *IOrderRepositoryMock_GetAssignedOrders_Call) Run(run func(ctx context.Context)) *IOrderRepositoryMock_GetAssignedOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IOrderRepositoryMock_GetAssignedOrders_Call) Return(_a0 []*order.Order, _a1 error) *IOrderRepositoryMock_GetAssignedOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderRepositoryMock_GetAssignedOrders_Call) RunAndReturn(run func(context.Context) ([]*order.Order, error)) *IOrderRepositoryMock_GetAssignedOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstCreatedOrder provides a mock function with given fields: ctx
func (_m *IOrderRepositoryMock) GetFirstCreatedOrder(ctx context.Context) (*order.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFirstCreatedOrder")
	}

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*order.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *order.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderRepositoryMock_GetFirstCreatedOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstCreatedOrder'
type IOrderRepositoryMock_GetFirstCreatedOrder_Call struct {
	*mock.Call
}

// GetFirstCreatedOrder is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IOrderRepositoryMock_Expecter) GetFirstCreatedOrder(ctx interface{}) *IOrderRepositoryMock_GetFirstCreatedOrder_Call {
	return &IOrderRepositoryMock_GetFirstCreatedOrder_Call{Call: _e.mock.On("GetFirstCreatedOrder", ctx)}
}

func (_c *IOrderRepositoryMock_GetFirstCreatedOrder_Call) Run(run func(ctx context.Context)) *IOrderRepositoryMock_GetFirstCreatedOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IOrderRepositoryMock_GetFirstCreatedOrder_Call) Return(_a0 *order.Order, _a1 error) *IOrderRepositoryMock_GetFirstCreatedOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IOrderRepositoryMock_GetFirstCreatedOrder_Call) RunAndReturn(run func(context.Context) (*order.Order, error)) *IOrderRepositoryMock_GetFirstCreatedOrder_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, aggregate
func (_m *IOrderRepositoryMock) Update(ctx context.Context, aggregate *order.Order) error {
	ret := _m.Called(ctx, aggregate)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) error); ok {
		r0 = rf(ctx, aggregate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IOrderRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IOrderRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - aggregate *order.Order
func (_e *IOrderRepositoryMock_Expecter) Update(ctx interface{}, aggregate interface{}) *IOrderRepositoryMock_Update_Call {
	return &IOrderRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, aggregate)}
}

func (_c *IOrderRepositoryMock_Update_Call) Run(run func(ctx context.Context, aggregate *order.Order)) *IOrderRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*order.Order))
	})
	return _c
}

func (_c *IOrderRepositoryMock_Update_Call) Return(_a0 error) *IOrderRepositoryMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IOrderRepositoryMock_Update_Call) RunAndReturn(run func(context.Context, *order.Order) error) *IOrderRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewIOrderRepositoryMock creates a new instance of IOrderRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOrderRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOrderRepositoryMock {
	mock := &IOrderRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
