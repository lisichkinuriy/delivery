// Package servers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package servers

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Courier defines model for Courier.
type Courier struct {
	// Id Идентификатор
	Id       openapi_types.UUID `json:"id"`
	Location Location           `json:"location"`

	// Name Имя
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Code Код ошибки
	Code int32 `json:"code"`

	// Message Текст ошибки
	Message string `json:"message"`
}

// Location defines model for Location.
type Location struct {
	// X X
	X int `json:"x"`

	// Y Y
	Y int `json:"y"`
}

// Order defines model for Order.
type Order struct {
	// Id Идентификатор
	Id       openapi_types.UUID `json:"id"`
	Location Location           `json:"location"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить всех курьеров
	// (GET /api/v1/couriers)
	GetCouriers(ctx echo.Context) error
	// Создать заказ
	// (POST /api/v1/orders)
	CreateOrder(ctx echo.Context) error
	// Получить все незавершенные заказы
	// (GET /api/v1/orders/active)
	GetOrders(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCouriers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouriers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCouriers(ctx)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrders(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/couriers", wrapper.GetCouriers)
	router.POST(baseURL+"/api/v1/orders", wrapper.CreateOrder)
	router.GET(baseURL+"/api/v1/orders/active", wrapper.GetOrders)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xU3UobTxR/leX8/5eLG/Vub20pBcGL3rSIF0MyiVOyH52dpIYQSGKrgqK3pRf26wXS",
	"kCXb2KzQJzjnjcrMGI1mtRZKaXsTdiZnzvl9nHPaUI6COAp5qBLw25CUt3nAzOda1JCCS/3J6vWNKvib",
	"bYhlFHOpBDchoqJ/KzwpSxErEYXgA77BEaY4pT5m9AoznOCA+phTF1yoRjJgCnxoNEQFXFCtmIMPiZIi",
	"rEHHhXpUZjZRG/6XvAo+/OddQfQu8Hnrs7iOCyELeCGOr3SyWKPjguQvGkLyCvibYGCYDHPFtzpbHRce",
	"ShkZ+tdJl6NKUbm3mOPIwZwOMMPPOMFsnq8I1erKFRgRKl7jUqMPeJKwWlHGj5jihHrUv5n1bkYG31Ve",
	"zWR9TtXbvNxZRPC0EHBrMfBZQeANVDugX1phN2Tlz++roj651iA6QoTVqADqKfVxiCnt4wBT7d8YBw7t",
	"0r49TWiXunSEKXUxx6H77b2mRj081/+bqC5m+hHtYUbHDo4w142AAxzq1+bVwq3mLVRdE3/yktVqXDoP",
	"eF00uWyBC00uEwtveam0VNKiRDEPWSzAh1Vz5ULM1LZxwGOx8JrLXtkuAXNX46qA6zvMcYxDzPGMTiy/",
	"c3PQdDPq05GDQ+phSq8XmIPBII2mjyvgwyOu1mYVtf5JHIWJ7YmVUslOX6h4aICwOK4La4j3PLHeWh9N",
	"DykeJD+ye7bjOpctw6RkLTDm3iD66cKgA5zSIX7RQ2ld7oMJrrJGXf0UxLuQ2eVThOP0chcMTJcmjSBg",
	"sjXz4n7C64czjyM9jkaqOEruZzH1zNVIj6CuM8aBxoNjh3oO7WGKZ3RExw71dV+bkTV1cYBTzMxavm78",
	"muRMcbsYFoxfLsD0F7jx4RaNCsT3WFmJJv8FU+bgFFNTS4vRpQO9M41GadG0bVjvf8esWXP/6Um7Q/w5",
	"/+lQV+t8DwAA//8lgDf/ewkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
